def MTDLBInput(mod1, mod2, mod3, mod4):
    
    nA_all = {
        ("m1"): 9,
        ("m2"): 21,
        ("m3"): 44,
        ("m4"): 13
    }
    nN_all = {
        ("m1"): 10,
        ("m2"): 30,
        ("m3"): 97,
        ("m4"): 20
    }    
    PRE_all = {
        ("m1", 1): [1],
        ("m1", 2): [2],
        ("m1", 3): [2, 3],
        ("m1", 4): [3, 4],
        ("m1", 5): [5],
        ("m1", 6): [1, 4, 8],
        ("m1", 7): [9],
        ("m2", 1): [1],
        ("m2", 2): [2, 3],
        ("m2", 3): [3, 10],
        ("m2", 4): [2],
        ("m2", 5): [2],
        ("m2", 6): [11],
        ("m2", 7): [14],
        ("m2", 8): [19],
        ("m2", 9): [18, 20],
        ("m2", 10): [13],
        ("m2", 11): [4, 12],
        ("m2", 12): [15, 21],
        ("m2", 13): [23, 24, 25],
        ("m2", 14): [5],
        ("m2", 15): [16, 26],
        ("m2", 16): [6, 22],
        ("m2", 17): [17, 27, 28],
        ("m2", 18): [7],
        ("m2", 19): [8, 29],
        ("m3", 1): [1], 
        ("m3", 2): [2],
        ("m3", 3): [3],
        ("m3", 4): [4, 7],
        ("m3", 5): [5],
        ("m3", 6): [6],
        ("m3", 7): [8],
        ("m3", 8): [9, 12],
        ("m3", 9): [10, 16],
        ("m3", 10): [11, 20],
        ("m3", 11): [13, 23],
        ("m3", 12): [14, 17],
        ("m3", 13): [15, 21],
        ("m3", 14): [18],
        ("m3", 15): [19, 22],
        ("m3", 16): [1, 7, 23],
        ("m3", 17): [24, 32],
        ("m3", 18): [25, 27, 35],
        ("m3", 19): [26, 30, 39],
        ("m3", 20): [28, 42],
        ("m3", 21): [29, 31, 45],
        ("m3", 22): [32, 36],
        ("m3", 23): [34, 40],
        ("m3", 24): [37, 43],
        ("m3", 25): [38, 41, 46],
        ("m3", 26): [44, 47],
        ("m3", 27): [49],
        ("m3", 28): [50, 52, 61],
        ("m3", 29): [51, 55, 64],
        ("m3", 30): [53, 57, 66],
        ("m3", 31): [54, 56, 59, 69],
        ("m3", 32): [58, 60, 72],
        ("m3", 33): [62, 67],
        ("m3", 34): [63, 65, 70],
        ("m3", 35): [68, 71, 73],
        ("m3", 36): [48],
        ("m3", 37): [75, 76, 83],
        ("m3", 38): [76, 77, 85],
        ("m3", 39): [79, 81, 82, 87],
        ("m3", 40): [84, 86, 88],
        ("m3", 41): [89],
        ("m3", 42): [74, 90],
        ("m3", 43): [48, 74],
        ("m4", 1): [1],
        ("m4", 2): [2],
        ("m4", 3): [4, 5],
        ("m4", 4): [1, 5],
        ("m4", 5): [3],
        ("m4", 6): [3, 6],
        ("m4", 7): [7],
        ("m4", 8): [9],
        ("m4", 9): [8, 12],
        ("m4", 10): [8, 13],
        ("m4", 11): [9, 14, 16],
        ("m4", 12): [14, 15],
        ("m4", 13): [18]
    }
    SUC_all = {
        ("m1", 0): [1, 2],
        ("m1", 1): [3],
        ("m1", 2): [4, 5],
        ("m1", 3): [7],
        ("m1", 4): [6],
        ("m1", 5): [8],
        ("m1", 6): [9],
        ("m1", 7): [10],
        ("m2", 0): [1, 2],
        ("m2", 1): [3],
        ("m2", 2): [30],
        ("m2", 3): [4],
        ("m2", 4): [10],
        ("m2", 5): [11],
        ("m2", 6): [12, 13, 14],
        ("m2", 7): [19, 20],
        ("m2", 8): [25, 26],
        ("m2", 9): [24],
        ("m2", 10): [18, 21],
        ("m2", 11): [5, 15],
        ("m2", 12): [22, 23],
        ("m2", 13): [27],
        ("m2", 14): [6, 16],
        ("m2", 15): [28],
        ("m2", 16): [7, 17],
        ("m2", 17): [29],
        ("m2", 18): [8],
        ("m2", 19): [9],
        ("m3", 0): [1, 2],
        ("m3", 1): [3, 4, 5, 6], 
        ("m3", 2): [7, 8], 
        ("m3", 3): [9, 10, 11], 
        ("m3", 4): [12, 13, 14, 15], 
        ("m3", 5): [16, 17, 18, 19], 
        ("m3", 6): [20, 21, 22], 
        ("m3", 7): [23], 
        ("m3", 8): [24, 25, 26], 
        ("m3", 9): [27, 28, 29], 
        ("m3", 10): [30, 31], 
        ("m3", 11): [32, 33, 34], 
        ("m3", 12): [35, 36, 37, 38], 
        ("m3", 13): [39, 40, 41], 
        ("m3", 14): [42, 43, 44], 
        ("m3", 15): [45, 46, 47], 
        ("m3", 16): [48, 49], 
        ("m3", 17): [50, 51], 
        ("m3", 18): [52, 53, 54], 
        ("m3", 19): [55, 56], 
        ("m3", 20): [57, 58], 
        ("m3", 21): [59, 60], 
        ("m3", 22): [61, 62, 63], 
        ("m3", 23): [64, 65], 
        ("m3", 24): [66, 67, 68], 
        ("m3", 25): [69, 70, 71], 
        ("m3", 26): [72, 73], 
        ("m3", 27): [74], 
        ("m3", 28): [75, 76], 
        ("m3", 29): [77], 
        ("m3", 30): [76, 79], 
        ("m3", 31): [80, 81], 
        ("m3", 32): [82], 
        ("m3", 33): [83, 84], 
        ("m3", 34): [85, 86], 
        ("m3", 35): [87, 88], 
        ("m3", 36): [89, 90], 
        ("m3", 37): [91], 
        ("m3", 38): [92], 
        ("m3", 39): [93], 
        ("m3", 40): [94], 
        ("m3", 41): [95], 
        ("m3", 42): [96], 
        ("m3", 43): [97],
        ("m4", 0): [1, 2],
        ("m4", 1): [3, 4],
        ("m4", 2): [5],
        ("m4", 3): [6],
        ("m4", 4): [7, 8, 9],
        ("m4", 5): [10],
        ("m4", 6): [11],
        ("m4", 7): [12, 14],
        ("m4", 8): [13, 15],
        ("m4", 9): [16],
        ("m4", 10): [17],
        ("m4", 11): [18],
        ("m4", 12): [19],
        ("m4", 13): [20]
    }
    THETA_all = {
        ("m1", 1): [1],
        ("m1", 2): [2],
        ("m1", 3): [2],
        ("m1", 4): [1, 2],
        ("m1", 5): [2],
        ("m1", 6): [1],
        ("m1", 7): [1, 2],
        ("m1", 8): [1, 2],
        ("m1", 9): [2],
        ("m1", 10): [1, 2],
        ("m2", 1): [2],
        ("m2", 2): [1],
        ("m2", 3): [1],
        ("m2", 4): [1, 2],
        ("m2", 5): [2],
        ("m2", 6): [2],
        ("m2", 7): [2],
        ("m2", 8): [1],
        ("m2", 9): [1],
        ("m2", 10): [1, 2],
        ("m2", 11): [1, 2],
        ("m2", 12): [1, 2],
        ("m2", 13): [1, 2],
        ("m2", 14): [1],
        ("m2", 15): [1],
        ("m2", 16): [1, 2],
        ("m2", 17): [2],
        ("m2", 18): [2],
        ("m2", 19): [1, 2],
        ("m2", 20): [1],
        ("m2", 21): [2],
        ("m2", 22): [1],
        ("m2", 23): [1],
        ("m2", 24): [2],
        ("m2", 25): [2],
        ("m2", 26): [1, 2],
        ("m2", 27): [1],
        ("m2", 28): [1],
        ("m2", 29): [1, 2],
        ("m2", 30): [1, 2],
        ("m3", 1): [1], 
        ("m3", 2): [1], 
        ("m3", 3): [1, 2], 
        ("m3", 4): [1, 2], 
        ("m3", 5): [1, 2], 
        ("m3", 6): [1], 
        ("m3", 7): [1, 2], 
        ("m3", 8): [2], 
        ("m3", 9): [1, 2], 
        ("m3", 10): [2], 
        ("m3", 11): [1], 
        ("m3", 12): [1, 2], 
        ("m3", 13): [1], 
        ("m3", 14): [1], 
        ("m3", 15): [2], 
        ("m3", 16): [1, 2], 
        ("m3", 17): [2], 
        ("m3", 18): [2], 
        ("m3", 19): [1, 2], 
        ("m3", 20): [1, 2], 
        ("m3", 21): [1, 2], 
        ("m3", 22): [1], 
        ("m3", 23): [2], 
        ("m3", 24): [2], 
        ("m3", 25): [2], 
        ("m3", 26): [1], 
        ("m3", 27): [2], 
        ("m3", 28): [1, 2], 
        ("m3", 29): [2], 
        ("m3", 30): [1, 2], 
        ("m3", 31): [1], 
        ("m3", 32): [1, 2], 
        ("m3", 33): [1], 
        ("m3", 34): [1], 
        ("m3", 35): [1, 2], 
        ("m3", 36): [1, 2], 
        ("m3", 37): [2], 
        ("m3", 38): [2], 
        ("m3", 39): [2], 
        ("m3", 40): [1, 2], 
        ("m3", 41): [1], 
        ("m3", 42): [2], 
        ("m3", 43): [1], 
        ("m3", 44): [2], 
        ("m3", 45): [2], 
        ("m3", 46): [2], 
        ("m3", 47): [1], 
        ("m3", 48): [1, 2], 
        ("m3", 49): [1, 2], 
        ("m3", 50): [2], 
        ("m3", 51): [1, 2], 
        ("m3", 52): [1], 
        ("m3", 53): [2], 
        ("m3", 54): [1], 
        ("m3", 55): [1], 
        ("m3", 56): [2], 
        ("m3", 57): [1, 2], 
        ("m3", 58): [1, 2], 
        ("m3", 59): [1], 
        ("m3", 60): [1, 2], 
        ("m3", 61): [2], 
        ("m3", 62): [1], 
        ("m3", 63): [2], 
        ("m3", 64): [2], 
        ("m3", 65): [1], 
        ("m3", 66): [2], 
        ("m3", 67): [1], 
        ("m3", 68): [2], 
        ("m3", 69): [1], 
        ("m3", 70): [2], 
        ("m3", 71): [1], 
        ("m3", 72): [1, 2], 
        ("m3", 73): [2], 
        ("m3", 74): [1], 
        ("m3", 75): [2], 
        ("m3", 76): [1, 2], 
        ("m3", 77): [1], 
        ("m3", 78): [2], 
        ("m3", 79): [1, 2], 
        ("m3", 80): [1], 
        ("m3", 81): [1], 
        ("m3", 82): [2], 
        ("m3", 83): [1, 2], 
        ("m3", 84): [1, 2], 
        ("m3", 85): [1, 2], 
        ("m3", 86): [2], 
        ("m3", 87): [1, 2], 
        ("m3", 88): [1, 2], 
        ("m3", 89): [1], 
        ("m3", 90): [2], 
        ("m3", 91): [2], 
        ("m3", 92): [1, 2], 
        ("m3", 93): [2], 
        ("m3", 94): [1], 
        ("m3", 95): [1, 2], 
        ("m3", 96): [2], 
        ("m3", 97): [1],
        ("m4", 1): [1],
        ("m4", 2): [1, 2],
        ("m4", 3): [2],
        ("m4", 4): [2],
        ("m4", 5): [1],
        ("m4", 6): [1, 2],
        ("m4", 7): [1, 2],
        ("m4", 8): [1, 2],
        ("m4", 9): [2],
        ("m4", 10): [2],
        ("m4", 11): [1, 2],
        ("m4", 12): [1],
        ("m4", 13): [1],
        ("m4", 14): [1, 2],
        ("m4", 15): [1],
        ("m4", 16): [1],
        ("m4", 17): [2],
        ("m4", 18): [2],
        ("m4", 19): [1, 2],
        ("m4", 20): [1, 2]
    }
    t_all = {
        ("m1",1): 30,
        ("m1",2): 28,
        ("m1",3): 12,
        ("m1",4): 34,
        ("m1",5): 13,
        ("m1",6): 21,
        ("m1",7): 6,
        ("m1",8): 18,
        ("m1",9): 25,
        ("m1",10): 10,
        ("m2",1): 11,
        ("m2",2): 20,
        ("m2",3): 20,
        ("m2",4): 14,
        ("m2",5): 19,
        ("m2",6): 1,
        ("m2",7): 7,
        ("m2",8): 6,
        ("m2",9): 6,
        ("m2",10): 7,
        ("m2",11): 19,
        ("m2",12): 11,
        ("m2",13): 18,
        ("m2",14): 13,
        ("m2",15): 5,
        ("m2",16): 11,
        ("m2",17): 6,
        ("m2",18): 4,
        ("m2",19): 6,
        ("m2",20): 8,
        ("m2",21): 18,
        ("m2",22): 15,
        ("m2",23): 15,
        ("m2",24): 6,
        ("m2",25): 10,
        ("m2",26): 20,
        ("m2",27): 13,
        ("m2",28): 1,
        ("m2",29): 4,
        ("m2",30): 5,
        ("m3",1): 37,
        ("m3",2): 3,
        ("m3",3): 5,
        ("m3",4): 3,
        ("m3",5): 10,
        ("m3",6): 6,
        ("m3",7): 37,
        ("m3",8): 2,
        ("m3",9): 3,
        ("m3",10): 10,
        ("m3",11): 6,
        ("m3",12): 5,
        ("m3",13): 2,
        ("m3",14): 10,
        ("m3",15): 6,
        ("m3",16): 5,
        ("m3",17): 3,
        ("m3",18): 19,
        ("m3",19): 6,
        ("m3",20): 5,
        ("m3",21): 3,
        ("m3",22): 10,
        ("m3",23): 37,
        ("m3",24): 2,
        ("m3",25): 10,
        ("m3",26): 6,
        ("m3",27): 3,
        ("m3",28): 19,
        ("m3",29): 6,
        ("m3",30): 3,
        ("m3",31): 10,
        ("m3",32): 5,
        ("m3",33): 10,
        ("m3",34): 6,
        ("m3",35): 5,
        ("m3",36): 2,
        ("m3",37): 19,
        ("m3",38): 6,
        ("m3",39): 5,
        ("m3",40): 2,
        ("m3",41): 10,
        ("m3",42): 5,
        ("m3",43): 3,
        ("m3",44): 6,
        ("m3",45): 5,
        ("m3",46): 3,
        ("m3",47): 19,
        ("m3",48): 11,
        ("m3",49): 34,
        ("m3",50): 10,
        ("m3",51): 6,
        ("m3",52): 2,
        ("m3",53): 19,
        ("m3",54): 6,
        ("m3",55): 2,
        ("m3",56): 10,
        ("m3",57): 3,
        ("m3",58): 6,
        ("m3",59): 3,
        ("m3",60): 19,
        ("m3",61): 5,
        ("m3",62): 19,
        ("m3",63): 6,
        ("m3",64): 5,
        ("m3",65): 10,
        ("m3",66): 5,
        ("m3",67): 2,
        ("m3",68): 6,
        ("m3",69): 5,
        ("m3",70): 2,
        ("m3",71): 19,
        ("m3",72): 5,
        ("m3",73): 3,
        ("m3",74): 11,
        ("m3",75): 19,
        ("m3",76): 6,
        ("m3",77): 10,
        ("m3",78): 2,
        ("m3",79): 6,
        ("m3",80): 2,
        ("m3",81): 19,
        ("m3",82): 3,
        ("m3",83): 5,
        ("m3",84): 6,
        ("m3",85): 5,
        ("m3",86): 19,
        ("m3",87): 5,
        ("m3",88): 2,
        ("m3",89): 29,
        ("m3",90): 34,
        ("m3",91): 6,
        ("m3",92): 19,
        ("m3",93): 2,
        ("m3",94): 5,
        ("m3",95): 34,
        ("m3",96): 29,
        ("m3",97): 14,
        ("m4", 1): 5,
        ("m4", 2): 28,
        ("m4", 3): 32,
        ("m4", 4): 7,
        ("m4", 5): 19,
        ("m4", 6): 11,
        ("m4", 7): 38,
        ("m4", 8): 29,
        ("m4", 9): 16,
        ("m4", 10): 17,
        ("m4", 11): 33,
        ("m4", 12): 16,
        ("m4", 13): 6,
        ("m4", 14): 10,
        ("m4", 15): 32,
        ("m4", 16): 18,
        ("m4", 17): 16,
        ("m4", 18): 32,
        ("m4", 19): 35,
        ("m4", 20): 17
    }
    
    MODELS = []
    nA = {}
    nN = {}
    PRE = {}
    SUC = {}
    THETA = {}
    C = 40
    t = {}
    nJ = 0
    
    if mod1 == 1:
        MODELS.append("m1")
        nA["m1"] = nA_all["m1"]
        nN["m1"] = nN_all["m1"]
        for k in range(0, nA["m1"]):
            if ("m1", k) in SUC_all:
                SUC[("m1", k)] = SUC_all[("m1", k)]
            if ("m1", k) in PRE_all:
                PRE[("m1", k)] = PRE_all[("m1", k)]
        for i in range(1, nN["m1"] + 1):
            THETA[("m1", i)] = THETA_all[("m1", i)]
            t[("m1", i)] = t_all[("m1", i)]
        if nJ < 3:
            nJ = 3
    if mod2 == 1:
        MODELS.append("m2")
        nA["m2"] = nA_all["m2"]
        nN["m2"] = nN_all["m2"]
        for k in range(0, nA["m2"]):
            if ("m2", k) in SUC_all:
                SUC[("m2", k)] = SUC_all[("m2", k)]
            if ("m2", k) in PRE_all:
                PRE[("m2", k)] = PRE_all[("m2", k)]
        for i in range(1, nN["m2"] + 1):
            THETA[("m2", i)] = THETA_all[("m2", i)]
            t[("m2", i)] = t_all[("m2", i)]
        if nJ < 4:
            nJ = 4
    if mod3 == 1:
        MODELS.append("m3")
        nA["m3"] = nA_all["m3"]
        nN["m3"] = nN_all["m3"]
        for k in range(0, nA["m3"]):
            if ("m3", k) in SUC_all:
                SUC[("m3", k)] = SUC_all[("m3", k)]
            if ("m3", k) in PRE_all:
                PRE[("m3", k)] = PRE_all[("m3", k)]
        for i in range(1, nN["m3"] + 1):
            THETA[("m3", i)] = THETA_all[("m3", i)]
            t[("m3", i)] = t_all[("m3", i)]
        if nJ < 4:
            nJ = 4
    if mod4 == 1:
        MODELS.append("m4")
        nA["m4"] = nA_all["m4"]
        nN["m4"] = nN_all["m4"]
        for k in range(0, nA["m4"]):
            if ("m4", k) in SUC_all:
                SUC[("m4", k)] = SUC_all[("m4", k)]
            if ("m4", k) in PRE_all:
                PRE[("m4", k)] = PRE_all[("m4", k)]
        for i in range(1, nN["m4"] + 1):
            THETA[("m4", i)] = THETA_all[("m4", i)]
            t[("m4", i)] = t_all[("m4", i)]
        if nJ < 4:
            nJ = 4        
    
    MODELS = set(MODELS)
    STATIONS = {(j) for j in range(nJ)}
    SIDES = {(1), (2)}
    MONO = {(m,i) for m in MODELS for i in range(1, nN[m]+1)}
    MONONO = {(m,i,i2) for m in MODELS for i in range(1, nN[m]+1) for i2 in range(1, nN[m]+1) if i2 < i}
    
    return nA, nN, MODELS, STATIONS, SIDES, MONO, MONONO, PRE, SUC, THETA, C, t
